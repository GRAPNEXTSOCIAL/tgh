# Generated by Django 4.0.4 on 2022-11-30 12:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('staff_category', models.CharField(choices=[('MANAGER', 'Manager'), ('CASHIER', 'Cashier'), ('ACCOUNTANT', 'Accountant')], max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_code', models.IntegerField()),
                ('category', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_code', models.CharField(max_length=5)),
                ('item_color', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField(blank=True)),
                ('discount', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('active', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_no', models.CharField(max_length=15)),
                ('name', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('locality', models.CharField(max_length=200, null=True)),
                ('city', models.CharField(max_length=50, null=True)),
                ('zipcode', models.CharField(max_length=10, null=True)),
                ('state', models.CharField(choices=[('Andhra Pradesh', 'Andhra Pradesh'), ('Arunachal Pradesh', 'Arunachal Pradesh'), ('Bihar', 'Bihar'), ('Chhattisgarh', 'Chhattisgarh'), ('Goa', 'Goa'), ('Gujurat', 'Gujurat'), ('Haryana', 'Haryana'), ('Himachal Pradesh', 'Himachal Pradesh'), ('Jharkhand', 'Jharkhand'), ('Karnataka', 'Karnataka'), ('Kerala', 'Kerala'), ('Assam', 'Assam'), ('Madhya Pradesh', 'Madhya Pradesh'), ('Maharashtra', 'Maharashtra'), ('Manipur', 'Manipur'), ('Meghalaya', 'Meghalaya'), ('Mizoram', 'Mizoram'), ('Nagaland', 'Nagaland'), ('Odisha', 'Odisha'), ('Punjab', 'Punjab'), ('Rajasthan', 'Rajasthan'), ('Sikkim', 'Sikkim'), ('Tamil Nadu', 'Tamil Nadu'), ('Telangana', 'Telangana'), ('Tripura', 'Tripura'), ('Uttarakhand', 'Uttarakhand'), ('Uttar Pradesh', 'Uttar Pradesh'), ('West Bengal', 'West Benga')], max_length=50, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Itemgroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_group_code', models.IntegerField()),
                ('item_group_name', models.CharField(max_length=50)),
                ('item_group_description', models.CharField(max_length=200)),
                ('item_group_image', models.ImageField(blank=True, upload_to='group_img')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('by_cash', models.FloatField(default=0, null=True)),
                ('by_card', models.FloatField(default=0, null=True)),
                ('by_credit', models.FloatField(default=0, null=True)),
                ('sdx_fin', models.FloatField(default=0, null=True)),
                ('by_upi', models.FloatField(default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trans_date', models.DateField(blank=True)),
                ('gstin', models.CharField(max_length=100)),
                ('pur_bill_no', models.CharField(max_length=50)),
                ('bill_type', models.CharField(choices=[('SGST/CGST', 'SGST/CGST'), ('IGST', 'IGST'), ('UNREGD', 'UNREGD'), ('COMPOSITE', 'COMPOSITE')], max_length=50)),
                ('total_qty', models.IntegerField()),
                ('gross_amt', models.FloatField()),
                ('disc_amt', models.FloatField()),
                ('gst_amt', models.FloatField()),
                ('tcs', models.FloatField()),
                ('o_charge', models.FloatField()),
                ('o_disc', models.FloatField()),
                ('grand_total', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='SalesRegister',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inv_date', models.DateField(blank=True)),
                ('inv_no', models.CharField(max_length=100)),
                ('total_qty', models.FloatField(null=True)),
                ('total_amt', models.FloatField(null=True)),
                ('discount', models.FloatField(null=True)),
                ('gst_amt', models.FloatField(null=True)),
                ('grand_total', models.FloatField(null=True)),
                ('by_cash', models.FloatField(default=0.0, null=True)),
                ('by_card', models.FloatField(default=0.0, null=True)),
                ('by_credit', models.FloatField(default=0.0, null=True)),
                ('sdx_fin', models.FloatField(default=0.0, null=True)),
                ('by_upi', models.FloatField(default=0.0, null=True)),
                ('redeem', models.FloatField(default=0.0, null=True)),
                ('ct_amt', models.FloatField(default=0.0, null=True)),
                ('refund', models.FloatField(default=0.0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_code', models.CharField(max_length=5)),
                ('item_size', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_code', models.CharField(max_length=50)),
                ('supplier', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=150)),
                ('contact_no', models.CharField(max_length=50)),
                ('supplier_email', models.EmailField(max_length=254, null=True)),
                ('gstin_no', models.CharField(max_length=50)),
                ('state', models.CharField(choices=[('Andhra Pradesh', 'Andhra Pradesh'), ('Arunachal Pradesh', 'Arunachal Pradesh'), ('Bihar', 'Bihar'), ('Chhattisgarh', 'Chhattisgarh'), ('Goa', 'Goa'), ('Gujurat', 'Gujurat'), ('Haryana', 'Haryana'), ('Himachal Pradesh', 'Himachal Pradesh'), ('Jharkhand', 'Jharkhand'), ('Karnataka', 'Karnataka'), ('Kerala', 'Kerala'), ('Assam', 'Assam'), ('Madhya Pradesh', 'Madhya Pradesh'), ('Maharashtra', 'Maharashtra'), ('Manipur', 'Manipur'), ('Meghalaya', 'Meghalaya'), ('Mizoram', 'Mizoram'), ('Nagaland', 'Nagaland'), ('Odisha', 'Odisha'), ('Punjab', 'Punjab'), ('Rajasthan', 'Rajasthan'), ('Sikkim', 'Sikkim'), ('Tamil Nadu', 'Tamil Nadu'), ('Telangana', 'Telangana'), ('Tripura', 'Tripura'), ('Uttarakhand', 'Uttarakhand'), ('Uttar Pradesh', 'Uttar Pradesh'), ('West Bengal', 'West Benga')], max_length=50, null=True)),
                ('pin', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_type', models.CharField(max_length=10, unique=True)),
                ('value', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.CharField(max_length=100)),
                ('product_description', models.CharField(max_length=250)),
                ('article_no', models.IntegerField(default=0, null=True)),
                ('size', models.CharField(max_length=50)),
                ('qty', models.IntegerField(null=True)),
                ('free', models.FloatField(default=0, null=True)),
                ('p_price', models.FloatField(null=True)),
                ('mrp', models.FloatField(null=True)),
                ('tax', models.FloatField(null=True)),
                ('disc1', models.FloatField(default=0, null=True)),
                ('d_Amt1', models.FloatField(default=0, null=True)),
                ('disc2', models.FloatField(default=0, null=True)),
                ('d_Amt2', models.FloatField(default=0, null=True)),
                ('l_Cost', models.FloatField(null=True)),
                ('tot_Cost', models.FloatField(null=True)),
                ('s_Price', models.FloatField(null=True)),
                ('total', models.FloatField(null=True)),
                ('marg', models.FloatField(null=True)),
                ('pur_bill_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.purchase')),
            ],
        ),
        migrations.AddField(
            model_name='purchase',
            name='supplier_name',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.supplier'),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.TextField()),
                ('brand', models.CharField(max_length=100)),
                ('item_type', models.TextField()),
                ('title', models.CharField(max_length=100)),
                ('barcode', models.CharField(max_length=100)),
                ('actual_mrp', models.FloatField()),
                ('purchase_price', models.FloatField()),
                ('selling_price', models.FloatField()),
                ('discounted_price', models.FloatField()),
                ('purchase_tax_type', models.CharField(choices=[('SGST/CGST', 'SGST/CGST'), ('IGST', 'IGST'), ('UNREGD', 'UNREGD'), ('COMPOSITE', 'COMPOSITE')], max_length=50, null=True)),
                ('purchase_tax', models.FloatField()),
                ('selling_tax', models.FloatField()),
                ('product_purchase_date', models.DateField(null=True)),
                ('manufacture_date', models.DateField(null=True)),
                ('expiry_date', models.DateField(null=True)),
                ('alertment_date', models.DateField(null=True)),
                ('description', models.TextField()),
                ('product_image', models.ImageField(upload_to='productimg')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.category')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.itemgroup')),
                ('item_color', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.color')),
                ('item_size', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.size')),
                ('supplier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.supplier')),
            ],
        ),
        migrations.CreateModel(
            name='OrderPlaced',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('order_date', models.DateField()),
                ('status', models.CharField(choices=[('Accepted', 'Accepted'), ('Packed', 'Packed'), ('On The Way', 'On The Way'), ('Delivered', 'Delivered'), ('Cancel', 'Cancel')], default='Pending', max_length=50)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pimage', models.ImageField(upload_to='productimage')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.product')),
            ],
        ),
        migrations.AddField(
            model_name='category',
            name='item_group_name',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.itemgroup'),
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cart_id', models.CharField(max_length=100, null=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('hold', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.customer')),
                ('offer_applied', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.coupon')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.product')),
            ],
        ),
    ]
